#!/usr/bin/env perl

####################################
#
# Author: David Klein
#
# Contact: david@soinkleined.com 
#
# Version: 0.1 - 2013-02-26 - David Klein <david@soinkleined.com>
#          * Initial release
#          * Added case insensitive match
#          * Added paragraph match
#
# Version: 0.2 - 2013-02-26 - David Klein <david@soinkleined.com>
#          * Added whole word match
#
# Version: 0.3 - 2013-02-27 - David Klein <david@soinkleined.com>
#          * Added the ability to match STDIN
#
# Version: 1.0 - 2013-02-28 - David Klein <david@soinkleined.com>
#          * Fixed bug that left script waiting on input if no argument was given
#
# Version: 1.1 - 2013-03-09 - David Klein <david@soinkleined.com>
#          * Changed duplicate SYNOPSIS heading to NAME in help output
#          * Added multiple file argument prefix in output
#
# Version: 1.2 - 2013-03-16 - David Klein <david@soinkleined.com>
#          * Fixed bug that stopped script when ARGV contained a file where user had no read access
#
# Version: 2.0 - 2013-03-18 - David Klein <david@soinkleined.com>
#          * Fixed bug if no search string was given
#          * Added invert-match feature
#          * Added usage sub for execution failures
#
####################################

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case bundling);

my $Insensitive='';
my $Paragraph='';
my $Word='';
my $InvertMatch='';
my $Version='2.0';
my $Prefix='';

my $Red = "\e[1;31m";
my $Green = "\e[1;32m";
my $Yellow = "\e[1;33m";
my $Blue = "\e[1;34m";
my $Magenta = "\e[1;35m";
my $Reset    = "\e[0m";
my $Underline    = "\e[4m";
my $Bold    = "\e[1m";

#######################################
# Command Arguments
####################################### 

GetOptions ('i|insensitive!' => \$Insensitive,
        'p|paragraph!' => \$Paragraph,
        'h|help' => \&help,
        'V|version' => \&version,
        'v|invert-match=s' => \$InvertMatch,
        'w|word!' => \$Word,
        );


if ($Paragraph){$/ = "";}  # Paragraph mode.

my $SearchString=shift;
&usage unless $SearchString;

my $STDINexists=0;
my $FILE;
if (! scalar(@ARGV) && ! -t STDIN){
    push(@ARGV, 'STDIN');
    $STDINexists++;
    $FILE=*STDIN;
} elsif (! scalar(@ARGV) && -t STDIN){ 
    &usage and exit 1;
}
for my $File (@ARGV) {
my $CannotOpen=0;
    (open $FILE, $File or (warn "Cannot open $File: $!\n" and $CannotOpen=1)) unless $STDINexists;
    next if $CannotOpen;
    while (<$FILE>) {
	my $Matched=0;
        if ($Word && $Insensitive && /\b$SearchString\b/i){
           $_ =~ s/(\b$SearchString\b)/$Magenta$1$Reset/gi;
		$Matched++;
        } elsif ($Word && /\b$SearchString\b/){
           $_ =~ s/(\b$SearchString\b)/$Magenta$1$Reset/g;
		$Matched++;
        } elsif ( $Insensitive && /$SearchString/i && ! $Word){
           $_ =~ s/($SearchString)/$Yellow$1$Reset/gi;
           $_ =~ s/($SearchString)/$Red$1$Reset/g;
		$Matched++;
        } elsif (! $Word && /$SearchString/){
           $_ =~ s/($SearchString)/$Red$1$Reset/g;
		$Matched++;
        }
	if (scalar(@ARGV) > 1){
		$Prefix="$File:";
		if ($Paragraph){
			$Prefix.="\n";
		}
	}
	if ($Matched){
		print "$Prefix$_" unless (($InvertMatch) and ($_ =~ /$InvertMatch/)); 
	} 
    }
close $FILE unless $STDINexists;
}

######################################
# Version
######################################

sub version{
    print "$Magenta$Version$Reset\n";
    exit 0;
}

######################################
# Help
######################################

sub help{
    print $Bold."NAME".$Reset."
    dgrep -- David's badass grep with fancy colors and cool features

".$Bold."SYNOPSIS".$Reset."
    ".$Bold."dgrep".$Reset." [".$Bold."-wip".$Reset."] [expression] [".$Bold."-v".$Reset."] [expression] [file ...]
    ".$Bold."dgrep".$Reset." [".$Bold."-h".$Reset." | ".$Bold."-V".$Reset."]

".$Bold."DESCRIPRION".$Reset."
    ".$Bold."-h".$Reset.", ".$Bold."--help".$Reset."			print this help
    ".$Bold."-i".$Reset.", ".$Bold."--insensitive".$Reset."		match case insensitive
    ".$Bold."-p".$Reset.", ".$Bold."--paragraph".$Reset."		match in paragraph context
    ".$Bold."-V".$Reset.", ".$Bold."--version".$Reset."		print version information and exit 
    ".$Bold."-v".$Reset.", ".$Bold."--invert-match".$Reset."		selected lines do not match specified pattern
    ".$Bold."-w".$Reset.", ".$Bold."--word".$Reset."			match whole word

    Matched expressions will be highlighted to illustrate against which criteria they were matched.
    Whole word matches will be highlighted in ".$Magenta."magenta".$Reset." and supercede other highlighted colors. Exact
    expression matches will be highlighted in ".$Red."red".$Reset." and case insensitive matches will be  highlighted
    in ".$Yellow."yellow".$Reset.".

Report bugs to <david\@soinkleined.com>
";
exit 0;
}

sub usage{
    print "usage:	".$Bold."dgrep".$Reset." [".$Bold."-wip".$Reset."] [expression] [".$Bold."-v".$Reset."] [expression] [file ...]
    	".$Bold."dgrep".$Reset." [".$Bold."-h".$Reset." | ".$Bold."-V".$Reset."]
";
    exit 1;
}
exit 0;
